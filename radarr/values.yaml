
# https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/
replicaCount: 1

# https://kubernetes.io/docs/concepts/containers/images/
image:
  repository: linuxserver/radarr
  pullPolicy: IfNotPresent
  # default: chart appVersion
  tag: ""

# https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
imagePullSecrets: []

# This is to override the chart name.
nameOverride: ""
fullnameOverride: ""

# https://kubernetes.io/docs/concepts/security/service-accounts/
serviceAccount:
  create: false
  automount: true
  annotations: {}
  # default: generated from tpl.fullname
  name: ""

# https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/ 
podAnnotations: {}
# https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
podLabels: {}

podSecurityContext:
  fsGroup: 1000
  supplementalGroups: [1000]

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

# https://kubernetes.io/docs/concepts/services-networking/service/
service:
  type: ClusterIP
  port: 7878

# https://kubernetes.io/docs/concepts/services-networking/ingress/
ingress:
  enabled: false
  className: 
  host: radarr.local
  secretName:
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"

resources: {}
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

# https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
livenessProbe: {}
#  httpGet:
#    path: /
#    port: http
readinessProbe: {}
#  httpGet:
#    path: /
#    port: http

# https://kubernetes.io/docs/concepts/workloads/autoscaling/
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
volumes:
- name: appdata
  emptyDir:
    sizeLimit: 10Gi

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []

nodeSelector: {}

tolerations: []

affinity: {}
